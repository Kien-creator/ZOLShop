@model Product
@{
    ViewData["Title"] = Model.Name;
}

<div class="row">
    <div class="col-md-4">
        <img src="~/images/@Model.Image" class="img-fluid" alt="@Model.Name" style="max-height: 300px; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
    </div>
    <div class="col-md-8">
        <h3>@Model.Name</h3>
        <p class="text-muted">Danh mục: @Model.Category.Name</p>
        <p>@Model.Description</p>
        
        <div class="mb-3">
            <span class="h4 text-primary">₫@((Model.Price * 24000).ToString("N0"))</span>
        </div>
        
        @if (User.Identity!.IsAuthenticated)
        {
            <div class="mb-3">
                <label class="form-label small fw-semibold text-muted">Đánh giá của bạn:</label>
                <div class="rating-input">
                    @{
                        var userRating = Model.Reviews.FirstOrDefault(r => r.CustomerID == UserManager.GetUserId(User) && r.Rating > 0);
                        var currentRating = userRating?.Rating ?? 0;
                    }
                    @for (int i = 1; i <= 5; i++)
                    {
                        <i class="fas fa-star rating-star" data-rating="@i" style="cursor: pointer; color: @(i <= currentRating ? "#ffc107" : "#ddd"); font-size: 1.5rem; margin-right: 3px;"></i>
                    }
                </div>
            </div>
        }
        
        <div class="mb-3">
            <strong>Tồn kho: </strong>
            @if (Model.Stock > 0)
            {
                <span class="text-success">@Model.Stock có sẵn</span>
            }
            else
            {
                <span class="text-danger">Hết hàng</span>
            }
        </div>

        @if (User.Identity!.IsAuthenticated && Model.Stock > 0)
        {
            <div class="mb-3">
                <div class="input-group" style="width: 200px;">
                    <input type="number" id="quantity" class="form-control" value="1" min="1" max="@Model.Stock">
                    <button class="btn btn-primary" onclick="addToCart(@Model.ProductID)">
                        <i class="fas fa-cart-plus"></i> Thêm vào giỏ
                    </button>
                </div>
            </div>
        }

        <a href="@Url.Action("Index")" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Quay lại sản phẩm
        </a>
    </div>
</div>

<!-- Reviews Section -->
<div class="row mt-5">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Đánh giá khách hàng (@Model.Reviews.Count)</h3>
            @if (Model.Reviews.Any())
            {
                <div>
                    <span class="me-2">Đánh giá trung bình:</span>
                    @{
                        var avgRating = Model.Reviews.Average(r => r.Rating);
                    }
                    @for (int i = 1; i <= 5; i++)
                    {
                        <i class="fas fa-star @(i <= avgRating ? "text-warning" : "text-muted")"></i>
                    }
                    <span class="ms-1">(@avgRating.ToString("F1"))</span>
                </div>
            }
        </div>
        
        @if (User.Identity!.IsAuthenticated)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h6><i class="fas fa-comment me-2"></i>Viết bình luận</h6>
                </div>
                <div class="card-body">
                    <form id="commentForm">
                        <textarea id="comment" name="comment" class="form-control" rows="3" placeholder="Chia sẻ trải nghiệm của bạn về sản phẩm này..." required></textarea>
                        <button type="submit" class="btn btn-primary mt-2">
                            <i class="fas fa-paper-plane me-2"></i>Gửi bình luận
                        </button>
                    </form>
                </div>
            </div>
        }
        
        @if (Model.Reviews.Any(r => !string.IsNullOrEmpty(r.Comment)))
        {
            @foreach (var review in Model.Reviews.Where(r => !string.IsNullOrEmpty(r.Comment)).OrderByDescending(r => r.ReviewDate))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="d-flex align-items-start">
                            <div class="me-3">
                                <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center" style="width: 50px; height: 50px; color: white; font-weight: bold;">
                                    @review.Customer.FullName.Substring(0, 1).ToUpper()
                                </div>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="mb-1">@review.Customer.FullName</h6>
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>@review.ReviewDate.ToString("dd/MM/yyyy HH:mm")
                                        </small>
                                    </div>
                                    @if (User.Identity!.IsAuthenticated && review.CustomerID == UserManager.GetUserId(User))
                                    {
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteReview(@review.ReviewID)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </div>
                                <p class="card-text mb-0">@review.Comment</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center py-4">
                <i class="fas fa-comments fa-3x text-muted mb-3"></i>
                <p class="text-muted">Chưa có đánh giá nào. Hãy là người đầu tiên đánh giá sản phẩm này!</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        @if (User.Identity!.IsAuthenticated)
        {
            var userRating = Model.Reviews.FirstOrDefault(r => r.CustomerID == UserManager.GetUserId(User) && r.Rating > 0);
            <text>let selectedRating = @(userRating?.Rating ?? 0);</text>
        }
        else
        {
            <text>let selectedRating = 0;</text>
        }
        
        // Rating stars interaction
        document.querySelectorAll('.rating-star').forEach(star => {
            star.addEventListener('click', function() {
                selectedRating = parseInt(this.dataset.rating);
                updateStars();
                // Auto-save rating
                saveRating(selectedRating);
            });
            
            star.addEventListener('mouseover', function() {
                const rating = parseInt(this.dataset.rating);
                highlightStars(rating);
            });
        });
        
        const ratingInput = document.querySelector('.rating-input');
        if (ratingInput) {
            ratingInput.addEventListener('mouseleave', function() {
                updateStars();
            });
        }
        
        function highlightStars(rating) {
            document.querySelectorAll('.rating-star').forEach((star, index) => {
                star.style.color = (index < rating) ? '#ffc107' : '#ddd';
            });
        }
        
        function updateStars() {
            highlightStars(selectedRating);
        }
        
        function saveRating(rating) {
            const formData = new FormData();
            formData.append('productId', @Model.ProductID);
            formData.append('rating', rating);
            formData.append('comment', '');
            formData.append('updateOnly', 'true');
            
            fetch('@Url.Action("AddReview", "Review")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Đã cập nhật đánh giá!', 'success');
                }
            });
        }
        

        
        // Submit comment
        document.getElementById('commentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            formData.append('productId', @Model.ProductID);
            formData.append('rating', 0);
            formData.append('comment', document.getElementById('comment').value);
            formData.append('updateOnly', 'false');
            
            fetch('@Url.Action("AddReview", "Review")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('comment').value = '';
                    location.reload();
                }
            });
        });
        
        function addToCart(productId) {
            const quantity = document.getElementById('quantity').value;
            fetch('@Url.Action("AddToCart", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'productId=' + productId + '&quantity=' + quantity
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Đã thêm vào giỏ hàng!', 'success');
                }
            });
        }
        
        function deleteReview(reviewId) {
            fetch('@Url.Action("DeleteReview", "Review")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'reviewId=' + reviewId
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Đã xóa đánh giá!', 'success');
                    setTimeout(() => location.reload(), 1000);
                }
            });
        }
        
        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = 'position-fixed';
            toast.style.cssText = `
                top: 80px; 
                right: 20px; 
                z-index: 99999; 
                min-width: 320px;
                background: ${type === 'success' ? '#28a745' : '#dc3545'};
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.3);
                font-weight: 600;
                border: 2px solid rgba(255,255,255,0.2);
                animation: slideInRight 0.3s ease;
            `;
            toast.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>${message}`;
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
}