@model IEnumerable<Product>
@{
    ViewData["Title"] = "Home";
}

<div class="row mb-4">
    <div class="col-md-12">
        <!-- Enhanced Filter Section -->
        <div class="card mb-4">
            <div class="card-body p-3">
                <form method="get" id="filterForm">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-4">
                            <label class="form-label small fw-semibold">Danh mục</label>
                            <select name="categoryId" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">Tất cả danh mục</option>
                                @foreach (var category in (List<Category>)ViewBag.Categories)
                                {
                                    @if (ViewBag.CategoryId?.ToString() == category.CategoryID.ToString())
                                    {
                                        <option value="@category.CategoryID" selected>@category.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@category.CategoryID">@category.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        
                        <div class="col-md-3">
                            <label class="form-label small fw-semibold">Sắp xếp theo</label>
                            <select name="sortBy" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">Tên A-Z</option>
                                @if (ViewBag.SortBy == "price")
                                {
                                    <option value="price" selected>Giá: Thấp đến cao</option>
                                }
                                else
                                {
                                    <option value="price">Giá: Thấp đến cao</option>
                                }
                                @if (ViewBag.SortBy == "price_desc")
                                {
                                    <option value="price_desc" selected>Giá: Cao đến thấp</option>
                                }
                                else
                                {
                                    <option value="price_desc">Giá: Cao đến thấp</option>
                                }
                                @if (ViewBag.SortBy == "newest")
                                {
                                    <option value="newest" selected>Mới nhất trước</option>
                                }
                                else
                                {
                                    <option value="newest">Mới nhất trước</option>
                                }
                            </select>
                        </div>
                        
                        <div class="col-md-3">
                            <div class="form-check">
                                @if (ViewBag.InStock == true)
                                {
                                    <input class="form-check-input" type="checkbox" name="inStock" value="true" checked onchange="this.form.submit()" id="inStockFilter">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" name="inStock" value="true" onchange="this.form.submit()" id="inStockFilter">
                                }
                                <label class="form-check-label small" for="inStockFilter">Chỉ hàng còn tồn</label>
                            </div>
                        </div>
                        
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-primary btn-sm w-100">
                                <i class="fas fa-filter"></i> Lọc
                            </button>
                        </div>
                    </div>
                    
                    <input type="hidden" name="searchString" value="@ViewBag.SearchString" />
                </form>
                
                @if (ViewBag.CategoryId != null || ViewBag.InStock == true || !string.IsNullOrEmpty(ViewBag.SearchString as string))
                {
                    <div class="mt-2">
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-times me-1"></i>Xóa tất cả bộ lọc
                        </a>
                    </div>
                }
            </div>
        </div>
        
        <!-- Results Summary -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <span class="text-muted">Hiển thị @Model.Count() sản phẩm @(!string.IsNullOrEmpty(ViewBag.SearchString as string) ? $"cho \"{ViewBag.SearchString}\"" : "")</span>
            <div class="d-flex gap-2">
                @if (ViewBag.CategoryId != null)
                {
                    var selectedCategory = ((List<Category>)ViewBag.Categories).FirstOrDefault(c => c.CategoryID == ViewBag.CategoryId);
                    <span class="badge bg-primary">@selectedCategory?.Name</span>
                }
                @if (ViewBag.InStock == true)
                {
                    <span class="badge bg-success">Còn hàng</span>
                }
            </div>
        </div>
    </div>
</div>

<!-- Products Grid -->
<div class="row g-3">
    @foreach (var product in Model)
    {
        <div class="col-lg-4 col-md-6 mb-3">
            <div class="card h-100 product-card position-relative">
                <div class="position-relative overflow-hidden">
                    <img src="~/images/@product.Image" class="card-img-top" alt="@product.Name" style="height: 180px; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                    @if (product.Stock <= 5 && product.Stock > 0)
                    {
                        <span class="position-absolute top-0 end-0 badge bg-warning m-2">Sắp hết</span>
                    }
                    else if (product.Stock == 0)
                    {
                        <span class="position-absolute top-0 end-0 badge bg-danger m-2">Hết hàng</span>
                    }
                    else
                    {
                        <span class="position-absolute top-0 end-0 badge bg-success m-2">Còn hàng</span>
                    }
                </div>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-gradient">@product.Name</h5>
                    <p class="card-text text-muted">@product.Description</p>
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-light text-dark me-2">
                            <i class="fas fa-tag me-1"></i>@(product.Category?.Name ?? "Uncategorized")
                        </span>
                    </div>
                    <div class="mt-auto">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="h5 price mb-0">₫@((product.Price * 24000).ToString("N0"))</span>
                            <div class="text-end">
                                <small class="text-muted d-block">Tồn: @product.Stock</small>
                                @if (product.Stock <= 5 && product.Stock > 0)
                                {
                                    <small class="text-warning"><i class="fas fa-exclamation-triangle"></i> Sắp hết</small>
                                }
                            </div>
                        </div>
                        <div class="d-grid gap-2">
                            <div class="btn-group" role="group">
                                <a href="@Url.Action("Details", new { id = product.ProductID })" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-info-circle"></i> Chi tiết
                                </a>
                                <button class="btn btn-outline-secondary btn-sm" onclick="quickView(@product.ProductID)" data-bs-toggle="modal" data-bs-target="#quickViewModal">
                                    <i class="fas fa-eye"></i> Xem nhanh
                                </button>
                            </div>
                            @if (User.Identity!.IsAuthenticated && product.Stock > 0)
                            {
                                <button class="btn btn-primary" onclick="addToCart(@product.ProductID)">
                                    <i class="fas fa-cart-plus"></i> Thêm vào giỏ
                                </button>
                            }
                            else if (product.Stock == 0)
                            {
                                <button class="btn btn-secondary" disabled>
                                    <i class="fas fa-times"></i> Hết hàng
                                </button>
                            }
                            else if (!User.Identity!.IsAuthenticated)
                            {
                                <a href="@Url.Action("Login", "Account")" class="btn btn-outline-primary">
                                    <i class="fas fa-sign-in-alt"></i> Đăng nhập để mua
                                </a>
                            }
                        </div>
                        @if (product.Reviews.Any())
                        {
                            <div class="mt-2">
                                @{
                                    var avgRating = product.Reviews.Average(r => r.Rating);
                                }
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="fas fa-star @(i <= avgRating ? "text-warning" : "text-muted")" style="font-size: 0.8em;"></i>
                                }
                                <small class="text-muted ms-1">(@product.Reviews.Count reviews)</small>
                            </div>
                        }
                        else
                        {
                            <div class="mt-2">
                                <small class="text-muted">Chưa có đánh giá</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="fas fa-search fa-4x text-muted mb-3 floating"></i>
            <h3 class="text-gradient">No products found</h3>
            <p class="lead text-muted">Try adjusting your search criteria or browse our categories</p>
        </div>
        <div class="card glass p-4 d-inline-block">
            <h6 class="mb-3">Browse Categories:</h6>
            <div class="d-flex flex-wrap justify-content-center gap-2">
                @foreach (var category in (List<Category>)ViewBag.Categories)
                {
                    <a href="@Url.Action("Index", new { categoryId = category.CategoryID })" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-tag me-1"></i>@category.Name
                    </a>
                }
            </div>
        </div>
    </div>
}

<!-- Quick View Modal -->
<div class="modal fade" id="quickViewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Quick View</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="quickViewContent">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Price range slider functionality
        document.addEventListener('DOMContentLoaded', function() {
            const priceRange = document.getElementById('priceRange');
            const priceDisplay = document.getElementById('priceRangeDisplay');
            const minPriceInput = document.querySelector('input[name="minPrice"]');
            const maxPriceInput = document.querySelector('input[name="maxPrice"]');
            
            if (priceRange) {
                priceRange.addEventListener('input', function() {
                    const value = this.value;
                    priceDisplay.textContent = `@ViewBag.MinProductPrice - ${value}`;
                    maxPriceInput.value = value;
                });
            }
            
            // Auto-submit on price input change
            const priceInputs = document.querySelectorAll('input[name="minPrice"], input[name="maxPrice"]');
            priceInputs.forEach(input => {
                input.addEventListener('change', function() {
                    setTimeout(() => {
                        document.getElementById('filterForm').submit();
                    }, 500);
                });
            });
            
            // Search on Enter key
            document.querySelector('input[name="searchString"]').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    document.getElementById('filterForm').submit();
                }
            });
        });
        
        function addToCart(productId) {
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            button.disabled = true;
            
            fetch('@Url.Action("AddToCart", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'productId=' + productId + '&quantity=1'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.innerHTML = '<i class="fas fa-check"></i> Added!';
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-success');
                    
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.classList.remove('btn-success');
                        button.classList.add('btn-primary');
                        button.disabled = false;
                    }, 2000);
                } else {
                    alert(data.message || 'Error adding to cart');
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding to cart');
                button.innerHTML = originalText;
                button.disabled = false;
            });
        }
        
        // Search suggestions
        let searchTimeout;
        const searchInput = document.getElementById('searchInput');
        const searchSuggestions = document.getElementById('searchSuggestions');
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                const query = this.value.trim();
                
                if (query.length < 2) {
                    searchSuggestions.style.display = 'none';
                    return;
                }
                
                searchTimeout = setTimeout(() => {
                    fetch(`@Url.Action("Search", "Product")?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            displaySearchSuggestions(data);
                        });
                }, 300);
            });
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
                    searchSuggestions.style.display = 'none';
                }
            });
        }
        
        function displaySearchSuggestions(products) {
            if (products.length === 0) {
                searchSuggestions.style.display = 'none';
                return;
            }
            
            let html = '';
            products.forEach(product => {
                html += `
                    <div class="p-2 border-bottom suggestion-item" style="cursor: pointer;" onclick="selectProduct('${product.name}')">
                        <div class="d-flex align-items-center">
                            <img src="/images/${product.image}" alt="${product.name}" style="width: 40px; height: 40px; object-fit: cover;" class="me-2" onerror="this.src='/images/placeholder.jpg'">
                            <div class="flex-grow-1">
                                <div class="fw-bold">${product.name}</div>
                                <small class="text-muted">${product.category} - $${product.price}</small>
                                ${product.stock > 0 ? '<small class="text-success">In Stock</small>' : '<small class="text-danger">Out of Stock</small>'}
                            </div>
                        </div>
                    </div>
                `;
            });
            
            searchSuggestions.innerHTML = html;
            searchSuggestions.style.display = 'block';
        }
        
        function selectProduct(productName) {
            searchInput.value = productName;
            searchSuggestions.style.display = 'none';
            document.getElementById('filterForm').submit();
        }
        
        // Quick View functionality
        function quickView(productId) {
            fetch(`@Url.Action("QuickView", "Product")?id=${productId}`)
                .then(response => response.json())
                .then(product => {
                    const content = `
                        <div class="row">
                            <div class="col-md-6">
                                <img src="/images/${product.image}" class="img-fluid" alt="${product.name}" onerror="this.src='/images/placeholder.jpg'">
                            </div>
                            <div class="col-md-6">
                                <h4>${product.name}</h4>
                                <p class="text-muted">${product.category}</p>
                                <p>${product.description}</p>
                                <div class="mb-3">
                                    <span class="h4 text-primary">$${product.price}</span>
                                </div>
                                <div class="mb-3">
                                    <strong>Stock: </strong>
                                    ${product.stock > 0 ? 
                                        `<span class="text-success">${product.stock} available</span>` : 
                                        `<span class="text-danger">Out of stock</span>`
                                    }
                                </div>
                                ${product.reviewCount > 0 ? `
                                    <div class="mb-3">
                                        <div class="d-flex align-items-center">
                                            ${generateStars(product.averageRating)}
                                            <span class="ms-2">(${product.reviewCount} reviews)</span>
                                        </div>
                                    </div>
                                ` : ''}
                                <div class="d-flex gap-2">
                                    <a href="@Url.Action("Details", "Home")?id=${product.id}" class="btn btn-primary">View Details</a>
                                    ${product.stock > 0 && @User.Identity!.IsAuthenticated.ToString().ToLower() ? 
                                        `<button class="btn btn-success" onclick="addToCart(${product.id}); $('#quickViewModal').modal('hide');">Add to Cart</button>` : 
                                        ''
                                    }
                                </div>
                            </div>
                        </div>
                    `;
                    document.getElementById('quickViewContent').innerHTML = content;
                })
                .catch(error => {
                    document.getElementById('quickViewContent').innerHTML = '<div class="alert alert-danger">Error loading product details</div>';
                });
        }
        
        function generateStars(rating) {
            let stars = '';
            for (let i = 1; i <= 5; i++) {
                stars += `<i class="fas fa-star ${i <= rating ? 'text-warning' : 'text-muted'}"></i>`;
            }
            return stars;
        }
        
        // Quick filter buttons
        function quickFilter(type, value) {
            const form = document.getElementById('filterForm');
            const input = form.querySelector(`[name="${type}"]`);
            if (input) {
                if (input.type === 'checkbox') {
                    input.checked = value;
                } else {
                    input.value = value;
                }
                form.submit();
            }
        }
    </script>
}